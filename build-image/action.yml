name: Build and push Docker image
description: Deploy to Kubernetes using Helm
inputs:
  type:
    description: |
      choose one of: docker, buildx, compose, bake
      This will effect what some of the other inputs mean. 
    default: docker
  repo:
    description: Repository name, defaults to git repo name
    required: false
  registry:
    description: Registry name, defaults to ecr if on aws. 
    required: false
  platforms:
    description: Build multi-arch image with BuildX
    required: false
  build-args:
    description: List of build args like key=value.
    required: false
  tags:
    description: Extra space delimited tags to add to the image
    required: false
  tag-strategy:
    description: Space delimited computed tag strategy. Choose one or more of DATE, GIT_REF, and/or GIT_SHA. Date is in UTC.
    required: false
    default: GIT_REF GIT_SHA
  target:
    description: Target stage to build
    required: false
  context:
    description: Build context
    required: false
    default: "."
  dockerfile:
    description: Dockerfile path
    required: false
  file:
    description: Buildfile path. This if for compose or bake. Builder when using non default file or path. 
    required: false
  output: 
    description: The output arg for docker and buildx.
    required: false
  push:
    description: Push image to registry
    required: false
    default: "false"
  cache: 
    description: Cache image layers if buildx enabled. 
    required: false
    default: "true"
  cache-scope: 
    description: The scope key to identify the cache. Useful when this is used more than once in a workflow. 
    required: false
    default: buildkit
  extra-args:
    description: Extra args to pass to buildx
    required: false
  docker-username:
    description: Docker user
    required: false
  docker-password:
    description: Docker password
    required: false
outputs:
  image:
    description: Docker image
    value: ${{ steps.setup.outputs.image }}
  repo:
    description: Repository Name
    value: ${{ steps.setup.outputs.repo }}
  ref:
    description: Branch name
    value: ${{ steps.setup.outputs.ref }}
  uri:
    description: Image URI
    value: ${{ steps.setup.outputs.uri }}
  tag: 
    description: The sha tag unique to this build. 
    value: ${{ steps.setup.outputs.git_sha }}

runs:
  using: composite
  steps:

  # check up on how we are going to login
  - name: Login Info
    id: login-info
    shell: bash
    env:
      DOCKER_USERNAME: ${{ inputs.docker-username }}
      DOCKER_PASSWORD: ${{ inputs.docker-password }}
      REGISTRY: ${{ inputs.registry }}
      DO_PUSH: ${{ inputs.push }}
    run: $GITHUB_ACTION_PATH/login-info.sh

  # first login. Assume ECR for now. 
  - name: Login to Amazon ECR
    id: login-ecr
    if: env.AWS_ENABLED == 'true' && inputs.push == 'true'
    uses: aws-actions/amazon-ecr-login@v2

  # do the helper login for gcp only when gcp is enabled
  - name: Token Validity
    id: gcp-debug
    if: env.GCP_ENABLED == 'true' && inputs.push == 'true'
    shell: bash
    env:
      REGISTRY: ${{ steps.login-info.outputs.registry }}
    run: |
      echo "Checking Token validity"
      curl -H "Content-Type: application/x-www-form-urlencoded" -d "access_token=$CLOUDSDK_AUTH_ACCESS_TOKEN" https://www.googleapis.com/oauth2/v1/tokeninfo
      echo "Ready to login to the registry"

  # if not ecr then login to dockerhub
  - name: Login to DockerHub
    id: login-dockerhub
    if: env.AWS_ENABLED != 'true' && inputs.push == 'true'
    uses: docker/login-action@v3
    with:
      username: ${{ steps.login-info.outputs.username }}
      password: ${{ steps.login-info.outputs.password }}
      registry: ${{ steps.login-info.outputs.registry }}

  # do the helper login for gcp only when gcp is enabled
  # - name: Image Repo Auth
  #   id: gcp-helper
  #   if: env.GCP_ENABLED == 'true' && inputs.push == 'true'
  #   shell: bash
  #   env:
  #     REGISTRY: ${{ steps.login-info.outputs.registry }}
  #   run: gcloud --quiet auth configure-docker "$REGISTRY"

  # start with checking on the builder kind
  - name: Builder Setup
    id: setup
    shell: bash
    env:
      BUILD_TYPE: ${{ inputs.type }}
      REGISTRY: ${{ steps.login-ecr.outputs.registry || steps.login-info.outputs.registry }}
      REPO: ${{ inputs.repo }}
    run: $GITHUB_ACTION_PATH/setup.sh

  # setup the base image
  - name: Setup CLI Args
    id: cli-args
    shell: bash
    if: steps.setup.outputs.build_from_file == 'false'
    env:
      EXTRA_ARGS: ${{ inputs.extra-args }}
      BUILD_ARGS: ${{ inputs.build-args }}
      PUSH: ${{ inputs.push }}
      DOCKERFILE: ${{ inputs.dockerfile }}
      BUILDFILE: ${{ inputs.file }}
      TARGET: ${{ inputs.target }}
      CONTEXT: ${{ inputs.context }}
      OUTPUT: ${{ inputs.output }}
      CACHE: ${{ inputs.cache }}
      CACHE_SCOPE: ${{ inputs.cache-scope }}
      BUILDX_ENABLED: ${{ steps.setup.outputs.buildx_enabled }}
      PLATFORMS: ${{ inputs.platforms }}
      MULTIARCH: "false"
      EXTRA_TAGS: ${{ inputs.tags }}
      FANCY_TAGS: ${{ inputs.tag-strategy }}
      IMAGE: ${{ steps.setup.outputs.image }}
      GIT_SHA: ${{ steps.setup.outputs.git_sha }}
      GIT_REF: ${{ steps.setup.outputs.git_ref }}
      DATE: ${{ steps.setup.outputs.date }}
    run: $GITHUB_ACTION_PATH/cli-args.sh

  - name: Setup Buildfile Args
    id: file-args
    shell: bash
    if: steps.setup.outputs.build_from_file == 'true'
    env:
      EXTRA_ARGS: ${{ inputs.extra-args }}
      PUSH: ${{ inputs.push }}
      TARGET: ${{ inputs.target }}
      CACHE: ${{ inputs.cache }}
      BUILD_TYPE: ${{ inputs.type }}
      BUILD_ARGS: ${{ inputs.build-args }}
      BUILD_FILE: ${{ inputs.file }}
    run: $GITHUB_ACTION_PATH/file-args.sh

  - name: Build Docker Command
    id: summary
    shell: bash
    if: always()
    env:
      BUILD_CMD: ${{ steps.setup.outputs.build_cmd }}
      CLI_ARGS: ${{ steps.cli-args.outputs.args || steps.file-args.outputs.args }}
      REPO: ${{ steps.setup.outputs.repo || '' }}
      REGISTRY: ${{ steps.setup.outputs.registry || '' }}
      IMAGE: ${{ steps.setup.outputs.image || '' }}
      TAGS: ${{ steps.cli-args.outputs.tags || '' }}
    run: $GITHUB_ACTION_PATH/summary.sh

  - name: Expose GitHub Runtime
    if: steps.setup.outputs.buildx_enabled == 'true'
    uses: crazy-max/ghaction-github-runtime@v3
  
  - name: Setup QEMU
    id: setup-qemu
    if: steps.setup.outputs.buildx_enabled == 'true'
    uses: docker/setup-qemu-action@v3

  - name: Set up Docker Buildx
    id: buildx
    if: steps.setup.outputs.buildx_enabled == 'true'
    uses: docker/setup-buildx-action@v3

  - name: Docker Build Preview
    id: preview
    shell: bash
    if: >-
      steps.setup.outputs.build_from_file == 'true' &&
      inputs.type != 'compose'
    env:
      REGISTRY: ${{ steps.setup.outputs.registry }}
      IMAGE: ${{ steps.setup.outputs.image || '' }}
      REPO: ${{ steps.setup.outputs.repo }}
      GIT_SHA: ${{ steps.setup.outputs.git_sha }}
      GIT_REF: ${{ steps.setup.outputs.git_ref }}
    run: ${{ steps.summary.outputs.command }} --print
        
  - name: Docker Build
    id: build
    shell: bash
    env:
      REGISTRY: ${{ steps.setup.outputs.registry }}
      IMAGE: ${{ steps.setup.outputs.image || '' }}
      REPO: ${{ steps.setup.outputs.repo }}
      GIT_SHA: ${{ steps.setup.outputs.git_sha }}
      GIT_REF: ${{ steps.setup.outputs.git_ref }}
    run: ${{ steps.summary.outputs.command }}
