name: Build and push Docker image
description: Deploy to Kubernetes using Helm
inputs:
  repo:
    description: Repository name, defaults to git repo name
    required: false
  registry:
    description: Registry name, defaults to ecr if on aws. 
    required: false
  platforms:
    description: Build multi-arch image
    required: false
  build-args:
    description: List of build args like key=value
    required: false
  extra-tags:
    description: Extra space delimited tags to add to the image
    required: false
  target:
    description: Target stage to build
    required: false
  context:
    description: Build context
    required: false
    default: "."
  dockerfile:
    description: Dockerfile path
    required: false
  push:
    description: Push image to registry
    required: false
    default: "true"
  cache: 
    description: Cache image layers if buildx enabled. 
    required: false
    default: "true"
  extra-args:
    description: Extra args to pass to buildx
    required: false
  docker-user:
    description: Docker user
    required: false
  docker-password:
    description: Docker password
    required: false
outputs:
  image:
    description: Docker image
    value: ${{ steps.setup.outputs.image }}
  repo:
    description: Repository Name
    value: ${{ steps.setup.outputs.repo }}
  branch:
    description: Branch name
    value: ${{ steps.setup.outputs.branch }}
  uri:
    description: Image URI
    value: ${{ steps.tags.outputs.uri }}

runs:
  using: composite
  steps:

  # first login. Assume ECR for now. 
  - name: Login to Amazon ECR
    id: login-ecr
    if: env.AWS_ENABLED == 'true'
    uses: aws-actions/amazon-ecr-login@v1

  # if not ecr then login to dockerhub
  - name: Login to DockerHub
    id: login-dockerhub
    if: >
      env.AWS_ENABLED != 'true' &&
      inputs.docker-user
    uses: docker/login-action@v3
    with:
      username: ${{ inputs.docker-user }}
      password: ${{ inputs.docker-password }}

  # setup the base image
  - name: Setup
    id: setup
    shell: bash
    env:
      REPO: ${{ inputs.repo }}
      REGISTRY: ${{ inputs.registry }}
      PUSH: ${{ inputs.push }}
      DOCKERFILE: ${{ inputs.dockerfile }}
      TARGET: ${{ inputs.target }}
      CONTEXT: ${{ inputs.context }}
      BUILD_ARGS: ${{ inputs.build-args }}
    run: |
      ARGS=()

      # if AWS_ENABLED use ecr registry
      if [[ "$AWS_ENABLED" == "true" ]]; then
        REGISTRY="${{ steps.login-ecr.outputs.registry }}"
      fi

      # if neither registry or repo is set dockerhub naming style matching github
      if [[ -z "$REGISTRY" && -z "$REPO" ]]; then
        IMAGE="${GITHUB_REPOSITORY}"
      else
        # otherwise use the repo name to match the image repo
        if [[ -z "$REPO" ]]; then
          REPO="$(basename $GITHUB_REPOSITORY)"
        fi
        # set the image name
        IMAGE="${REGISTRY}/${REPO}"
      fi

      # add any custom build args
      build_args=($BUILD_ARGS)
      for arg in ${build_args[*]}; do
        ARGS+=(--build-arg "${arg}")
      done

      # if target is set then add the arg
      if [[ -n "$TARGET" ]]; then
        ARGS+=(--target "${TARGET}")
      fi

      # add dockerfile param if given
      if [[ -n "$DOCKERFILE" ]]; then
        ARGS+=(-f "${DOCKERFILE}")
      fi

      # if push is true then add the arg
      if [[ "$PUSH" == "true" ]]; then
        ARGS+=(--push)
      fi
      
      # finally add the context
      ARGS+=("${CONTEXT}")

      echo "args=${ARGS[*]}" >> $GITHUB_OUTPUT
      echo "image=$IMAGE" >> $GITHUB_OUTPUT
      echo "repo=$REPO" >> $GITHUB_OUTPUT
      echo "registry=$REGISTRY" >> $GITHUB_OUTPUT

  - name: Setup Tags
    id: tags
    shell: bash
    env:
      IMAGE: ${{ steps.setup.outputs.image }}
      EXTRA_TAGS: ${{ inputs.extra-tags }}
    run: |
      ARGS=()
      TAGS=($EXTRA_TAGS)

      # common to use sha as a tag to direct ref commit
      SHA="$(git rev-parse --short HEAD)"
      TAGS+=("${SHA}")
      
      # the sed part handles dependabot issues with slash names
      ## TODO: maybe use this GITHUB_REF_NAME
      REF="$(echo ${GITHUB_REF##*/} | sed -e 's/\//_/g')"
      TAGS+=("${REF}")

      for tag in ${TAGS[*]}; do
        ARGS+=(-t "${IMAGE}:${tag}")
      done

      echo "ref=$REF" >> $GITHUB_OUTPUT
      echo "sha=${SHA}" >> $GITHUB_OUTPUT
      echo "uri=${IMAGE}:${SHA}" >> $GITHUB_OUTPUT
      echo "tags=${TAGS[*]}" >> $GITHUB_OUTPUT
      echo "args=${ARGS[*]}" >> $GITHUB_OUTPUT

  - name: Buildx Args
    shell: bash
    id: buildx-args
    env:
      PLATFORMS: ${{ inputs.platforms }}
      PUSH: ${{ inputs.push }}
      MULTIARCH: "false"
      CACHE: ${{ inputs.cache }}
    run: |
      ARGS=()

      # if there are platforms
      if [[ -n "$PLATFORMS" ]]; then
        ARGS+=(--platform "${PLATFORMS}")
        MULTIARCH="true"
      fi

      # if cache is true
      if [[ "$CACHE" == "true" ]]; then
        ARGS+=(--cache-to type=gha,mode=max)
        ARGS+=(--cache-from type=gha)
      fi

      echo "args=${ARGS[*]}" >> $GITHUB_OUTPUT
      echo "multiarch=${MULTIARCH}" >> $GITHUB_OUTPUT

  - name: Expose GitHub Runtime
    uses: crazy-max/ghaction-github-runtime@v3
  
  - name: Setup QEMU
    id: setup-qemu
    uses: docker/setup-qemu-action@v2

  - name: Set up Docker Buildx
    id: buildx
    uses: docker/setup-buildx-action@v2

  - name: Build Docker Command
    id: docker-command
    shell: bash
    env:
      EXTRA_ARGS: ${{ inputs.extra-args }}
      TAG_ARGS: ${{ steps.tags.outputs.args }}
      BUILDX_ARGS: ${{ steps.buildx-args.outputs.args }}
      BASE_ARGS: ${{ steps.setup.outputs.args }}
    run: |
      DOCKER_COMMAND="docker buildx build $EXTRA_ARGS $BUILDX_ARGS $TAG_ARGS $BASE_ARGS"
      echo "DOCKER_COMMAND=$DOCKER_COMMAND" >> $GITHUB_OUTPUT

  - name: Build and Push
    id: build
    shell: bash
    run: ${{ steps.docker-command.outputs.DOCKER_COMMAND }}

  - name: Image Summary
    shell: bash
    env:
      REPO: ${{ steps.setup.outputs.repo }}
      REGISTRY: ${{ steps.setup.outputs.registry }}
      IMAGE: ${{ steps.setup.outputs.image }}
      TAGS: ${{ steps.tags.outputs.tags }}
      DOCKER_COMMAND: ${{ steps.docker-command.outputs.DOCKER_COMMAND }}
    run: |
      cat <<EOF >> $GITHUB_STEP_SUMMARY
      ## Docker Command
      \`\`\`bash
      $DOCKER_COMMAND
      \`\`\`
      ## Image Summary
      **Image**: ${IMAGE}
      **Tags**: 
      EOF
      for tag in $TAGS; do
        echo "- ${tag}" >> $GITHUB_STEP_SUMMARY
      done
  
  # - name: Build and Push Multi-Arch Image
  #   uses: docker/build-push-action@v5
  #   with:
  #     context: .
  #     push: true
  #     builder: ${{ steps.buildx.outputs.name }}
  #     platforms: ${{ inputs.platforms }}
  #     tags: ${{ steps.setup.outputs.tags }}
  #     cache-from: type=gha
  #     cache-to: type=gha,mode=max
  #     build-args: ${{ inputs.extra-args }}

        